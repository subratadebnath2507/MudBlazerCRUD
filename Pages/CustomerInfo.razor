@page "/customer"
@using MudBlazerCRUD.Data
@inject ICustomerService CustomerService
@inject MudBlazor.ISnackbar Snackbar


<MudCard Elevation="10">
    <MudGrid>
        <MudItem xs="4">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudPaper Elevation="4" Class="d-flex justify-center align-center" Style="background: linear-gradient(90deg, #1976d2 0%, #42a5f5 100%); padding: 16px; border-radius: 12px;">
                        <MudText Typo="Typo.h5" Align="Align.Center" Style="color: #ffffff; font-weight:600; letter-spacing:1px;">
                            Add / Edit Customer
                        </MudText>
                    </MudPaper>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudForm>
                    <MudTextField @bind-Value="customer.FirstName" Label="FirstName" Required="true" RequiredError="FirstName is required!" Variant="Variant.Text" Margin="Margin.Normal" />
                    <MudTextField @bind-Value="customer.LastName" Label="LastName" Required="true" RequiredError="LastName is required!" Variant="Variant.Text" Margin="Margin.Normal" />
                    <MudTextField @bind-Value="customer.PhoneNumber" Label="PhoneNumber" Required="true" RequiredError="PhoneNumber is required!" Variant="Variant.Text" Margin="Margin.Normal" />
                    <br />
                    <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="Save">Save Customer</MudButton>
                </MudForm>  
            </MudCardContent>
        </MudItem>
    </MudGrid>

</MudCard>
<br />

<MudTable Elevation="10" Items="GetAllCustomers()" Filter="new Func<Customer, bool>(Search)" @bind-customer="customer" Hover="@hover" Dense="@dense">
    <ToolBarContent>

        <MudText Typo="Typo.h6">Customers</MudText>
        <MudToolBarSpacer />
        <MudTextField @bind-Value="searchstring" Placeholder="Search Customers..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>


    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x => x.FirstName)" InitialDirection="SortDirection.Ascending">FirstName</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x => x.LastName)">LastName</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<Customer, object>(x => x.PhoneNumber)">PhoneNumber</MudTableSortLabel></MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="FirstName">@context.FirstName</MudTd>
        <MudTd DataLabel="LastName">@context.LastName</MudTd>
        <MudTd DataLabel="PhoneNumber">@context.PhoneNumber</MudTd>
        <MudTd DataLabel="">
            <MudFab @onclick="@(() => Edit(context.Id))" Icon="@Icons.Material.Filled.Edit" Color="Color.Primary" Size="Size.Small" IconSize="Size.Small" />
            <MudFab @onclick="@(() => Delete(context.Id))" Icon="@Icons.Material.Filled.Delete" Color="Color.Primary" Size="Size.Small" IconSize="Size.Small" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] {5,10,20,50,100}" />
    </PagerContent>

</MudTable>

<MudSwitch @bind-Checked="@hover" Color="Color.Primary">Hover</MudSwitch>
<MudSwitch @bind-Checked="@dense" Color="Color.Secondary">Dense</MudSwitch>
<br />
<br />

@code {

    private bool hover = true;
    private bool dense = true;
    private string searchstring = "";
    private Customer customer = new Customer();
    private List<Customer> customers = new List<Customer>();

    protected override async Task OnInitializedAsync()
    {
        GetAllCustomers();
    }

    private List<Customer> GetAllCustomers()
    {
        customers = CustomerService.GetAllCustomers();
        return customers;
    }

    private bool Search(Customer customer)
    {
        if(customer.FirstName !=null && customer.LastName !=null && customer.PhoneNumber != null &&
        (customer.FirstName.Contains(searchstring, StringComparison.OrdinalIgnoreCase) || 
        customer.LastName.Contains(searchstring, StringComparison.OrdinalIgnoreCase) ||
        customer.PhoneNumber.Contains(searchstring, StringComparison.OrdinalIgnoreCase)))
        {
            return true;
        }

        return false;
    }

    private void Save()
    {
        CustomerService.SaveCustomer(customer);
        customer = new Customer();
        Snackbar.Add("Customer Added Successfully", MudBlazor.Severity.Success);
        GetAllCustomers();
    }

    private void Edit(int id)
    {
        var cust = customers.FirstOrDefault(x => x.Id == id);
        if (cust != null)
        {
            customer = new Customer
            {
                Id = cust.Id,
                FirstName = cust.FirstName,
                LastName = cust.LastName,
                PhoneNumber = cust.PhoneNumber
            };
        }
    }

    private void Delete(int id)
    {
        var cust = customers.FirstOrDefault(x => x.Id == id);
        if (cust != null)
        {
            CustomerService.DeleteCustomer(id);
            Snackbar.Add("Customer Deleted Successfully", MudBlazor.Severity.Success);
            GetAllCustomers();
        }
    }
}
